package me.kamsa23.trueSight.exploits;

import me.kamsa23.trueSight.managers.LogManager;
import me.kamsa23.trueSight.managers.ConfigUtil;
import org.bukkit.event.Listener;
import org.bukkit.event.EventHandler;
import org.bukkit.event.player.AsyncPlayerPreLoginEvent;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class AntiBotJoin implements Listener {
    // Load from config (with defaults)
    private static final int MAX_ATTEMPTS = ConfigUtil.getPlugin()
            .getConfig().getInt("exploits.AntiBotJoin.max-attempts", 3);
    private static final long WINDOW_MS = ConfigUtil.getPlugin()
            .getConfig().getLong("exploits.AntiBotJoin.window-ms", 30_000L);

    // Track IP -> (firstAttemptTimestamp, count)
    private static final ConcurrentMap<String, Attempt> attempts = new ConcurrentHashMap<>();

    @EventHandler
    public void onAsyncPreLogin(AsyncPlayerPreLoginEvent event) {
        String ip = event.getAddress().getHostAddress();
        long now = System.currentTimeMillis();

        // Fetch or reset attempt record
        Attempt record = attempts.get(ip);
        if (record == null || now - record.firstTime > WINDOW_MS) {
            record = new Attempt(now, 1);
            attempts.put(ip, record);
        } else {
            record.count++;
        }

        // If over limit, disallow login
        if (record.count > MAX_ATTEMPTS) {
            LogManager.log("AntiBotJoin: blocked " + ip + " (count=" + record.count + ")");
            String kickMsg = ConfigUtil.getMessages()
                    .getString("exploits.bot-join-message",
                            "Too many join attempts. Please try again later.");
            event.disallow(AsyncPlayerPreLoginEvent.Result.KICK_OTHER, kickMsg);
        }
    }

    // Simple struct for tracking
    private static class Attempt {
        final long firstTime;
        int count;

        Attempt(long firstTime, int count) {
            this.firstTime = firstTime;
            this.count = count;
        }
    }
}