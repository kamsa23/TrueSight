package me.kamsa23.trueSight.exploits;

import me.kamsa23.trueSight.TrueSight;
import me.kamsa23.trueSight.managers.ConfigUtil;
import me.kamsa23.trueSight.managers.LogManager;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.PacketType;
import org.bukkit.entity.Player;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class PacketThrottle {
    private final int maxPackets = ConfigUtil.getPlugin()
            .getConfig().getInt("exploits.PacketThrottle.max-packets", 100);
    private final long windowMs = ConfigUtil.getPlugin()
            .getConfig().getLong("exploits.PacketThrottle.window-ms", 1_000L);

    private final ConcurrentMap<Player, Counter> counterMap = new ConcurrentHashMap<>();

    public PacketThrottle() {
        ProtocolManager pm = ProtocolLibrary.getProtocolManager();
        pm.addPacketListener(new PacketAdapter(TrueSight.getInstance(),
                PacketType.Play.Client.FLYING,
                PacketType.Play.Client.POSITION,
                PacketType.Play.Client.POSITION_LOOK) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                Player p = event.getPlayer();
                long now = System.currentTimeMillis();
                Counter c = counterMap.get(p);

                if (c == null || now - c.startTime > windowMs) {
                    c = new Counter(now, 1);
                    counterMap.put(p, c);
                } else {
                    c.count++;
                }

                if (c.count > maxPackets) {
                    String kickMsg = ConfigUtil.getPlugin()
                            .getConfig().getString("exploits.PacketThrottle.kick-message",
                                    "Too many packets sent.");
                    p.kickPlayer(kickMsg);
                    LogManager.log("PacketThrottle: kicked " + p.getName()
                            + " for " + c.count + " packets");
                }
            }
        });
    }

    private static class Counter {
        final long startTime;
        int count;
        Counter(long startTime, int count) {
            this.startTime = startTime;
            this.count = count;
        }
    }
}